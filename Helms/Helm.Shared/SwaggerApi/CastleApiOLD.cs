////----------------------
//// <auto-generated>
////     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
//// </auto-generated>
////----------------------

//#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
//#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
//#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
//#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
//#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
//#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
//#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
//#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

//namespace Helm.Shared.SwaggerApi
//{
//    using System = global::System;

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class CastleApiOLD
//    {
//        private string _baseUrl = "";
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

//        private System.Net.Http.Headers.AuthenticationHeaderValue _authHeader = null; // Auth Header var
//        public CastleApiOLD(string baseUrl, System.Net.Http.HttpClient httpClient)
//        {
//            BaseUrl = baseUrl;
//            _httpClient = httpClient;
//            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
//        }

//        //
//        // UPDATE API TO INCLUDE API FOR USERCONTROLLER
//        //

//        //public void SetHeaderJwtToken(string token) // set header with Token
//        //{
//        //    _authHeader = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
//        //}

//        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//        {
//            var settings = new Newtonsoft.Json.JsonSerializerSettings();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        public string BaseUrl
//        {
//            get { return _baseUrl; }
//            set { _baseUrl = value; }
//        }

//        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <returns>Success</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Agent>> GetAgentsAsync()
//        {
//            return GetAgentsAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>Success</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Agent>> GetAgentsAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Agents");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    //if (_authHeader == null) throw new Exception("JWT Auth Header is not set");
//                    //request_.Headers.Authorization = _authHeader; // Set Auth Header

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Agent>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>Success</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<Agent> GetAgentByIdAsync(string agentId)
//        {
//            return GetAgentByIdAsync(agentId, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>Success</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<Agent> GetAgentByIdAsync(string agentId, System.Threading.CancellationToken cancellationToken)
//        {
//            if (agentId == null)
//                throw new System.ArgumentNullException("agentId");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Agents/{agentId}");
//            urlBuilder_.Replace("{agentId}", System.Uri.EscapeDataString(ConvertToString(agentId, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    //request_.Headers.Authorization = _authHeader; // Set Auth Header

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<Agent>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>Created</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<AgentTask> TaskAgentAsync(string agentId, TaskAgentRequest body)
//        {
//            return TaskAgentAsync(agentId, body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>Created</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<AgentTask> TaskAgentAsync(string agentId, TaskAgentRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (agentId == null)
//                throw new System.ArgumentNullException("agentId");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Agents/{agentId}");
//            urlBuilder_.Replace("{agentId}", System.Uri.EscapeDataString(ConvertToString(agentId, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    //request_.Headers.Authorization = _authHeader; // Set Auth Header

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 201)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<AgentTask>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>Success</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task RemoveAgentAsync(string agentId)
//        {
//            return RemoveAgentAsync(agentId, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>Success</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task RemoveAgentAsync(string agentId, System.Threading.CancellationToken cancellationToken)
//        {
//            if (agentId == null)
//                throw new System.ArgumentNullException("agentId");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Agents/{agentId}");
//            urlBuilder_.Replace("{agentId}", System.Uri.EscapeDataString(ConvertToString(agentId, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    //request_.Headers.Authorization = _authHeader; // Set Auth Header

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>Success</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AgentTaskHistory>> GetTaskHistorysByAgentIdAsync(string agentId)
//        {
//            return GetTaskHistorysByAgentIdAsync(agentId, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>Success</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AgentTaskHistory>> GetTaskHistorysByAgentIdAsync(string agentId, System.Threading.CancellationToken cancellationToken)
//        {
//            if (agentId == null)
//                throw new System.ArgumentNullException("agentId");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Agents/{agentId}/taskhistorys");
//            urlBuilder_.Replace("{agentId}", System.Uri.EscapeDataString(ConvertToString(agentId, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    //request_.Headers.Authorization = _authHeader; // Set Auth Header

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AgentTaskHistory>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>Success</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<AgentTaskHistory> GetTaskHistoryByBothIdAsync(string agentId, string taskId)
//        {
//            return GetTaskHistoryByBothIdAsync(agentId, taskId, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>Success</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<AgentTaskHistory> GetTaskHistoryByBothIdAsync(string agentId, string taskId, System.Threading.CancellationToken cancellationToken)
//        {
//            if (agentId == null)
//                throw new System.ArgumentNullException("agentId");

//            if (taskId == null)
//                throw new System.ArgumentNullException("taskId");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Agents/{agentId}/taskhistory/{taskId}");
//            urlBuilder_.Replace("{agentId}", System.Uri.EscapeDataString(ConvertToString(agentId, System.Globalization.CultureInfo.InvariantCulture)));
//            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    //request_.Headers.Authorization = _authHeader; // Set Auth Header

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<AgentTaskHistory>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>Success</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<AgentTaskResult> GetTaskHistoryResultByBothIdAsync(string agentId, string taskId)
//        {
//            return GetTaskHistoryResultByBothIdAsync(agentId, taskId, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>Success</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<AgentTaskResult> GetTaskHistoryResultByBothIdAsync(string agentId, string taskId, System.Threading.CancellationToken cancellationToken)
//        {
//            if (agentId == null)
//                throw new System.ArgumentNullException("agentId");

//            if (taskId == null)
//                throw new System.ArgumentNullException("taskId");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Agents/{agentId}/taskhistoryresult/{taskId}");
//            urlBuilder_.Replace("{agentId}", System.Uri.EscapeDataString(ConvertToString(agentId, System.Globalization.CultureInfo.InvariantCulture)));
//            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    //request_.Headers.Authorization = _authHeader; // Set Auth Header

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<AgentTaskResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>Success</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<HealthType> GetHealthStatusAsync()
//        {
//            return GetHealthStatusAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>Success</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<HealthType> GetHealthStatusAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Health");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    //request_.Headers.Authorization = _authHeader; // Set Auth Header

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<HealthType>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>Success</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Listener>> GetListenersAsync()
//        {
//            return GetListenersAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>Success</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Listener>> GetListenersAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Listeners");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    //request_.Headers.Authorization = _authHeader; // Set Auth Header

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Listener>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>Created</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<Listener> StartListenerAsync(StartHttpListenerRequest body)
//        {
//            return StartListenerAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>Created</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<Listener> StartListenerAsync(StartHttpListenerRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Listeners");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    //request_.Headers.Authorization = _authHeader; // Set Auth Header

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 201)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<Listener>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>Success</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<Listener> GetListenersByNameAsync(string name)
//        {
//            return GetListenersByNameAsync(name, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>Success</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<Listener> GetListenersByNameAsync(string name, System.Threading.CancellationToken cancellationToken)
//        {
//            if (name == null)
//                throw new System.ArgumentNullException("name");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Listeners/{name}");
//            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    //request_.Headers.Authorization = _authHeader; // Set Auth Header

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<Listener>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>Success</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task StopListenerAsync(string name)
//        {
//            return StopListenerAsync(name, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>Success</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task StopListenerAsync(string name, System.Threading.CancellationToken cancellationToken)
//        {
//            if (name == null)
//                throw new System.ArgumentNullException("name");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Listeners/{name}");
//            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    //request_.Headers.Authorization = _authHeader; // Set Auth Header

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    using (var streamReader = new System.IO.StreamReader(responseStream))
//                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                    {
//                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class Agent
//    {
//        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public AgentMetadata Metadata { get; set; }

//        [Newtonsoft.Json.JsonProperty("lastSeen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset LastSeen { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class AgentMetadata
//    {
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Id { get; set; }

//        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Address { get; set; }

//        [Newtonsoft.Json.JsonProperty("hostname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Hostname { get; set; }

//        [Newtonsoft.Json.JsonProperty("integrity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Integrity { get; set; }

//        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Username { get; set; }

//        [Newtonsoft.Json.JsonProperty("processName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ProcessName { get; set; }

//        [Newtonsoft.Json.JsonProperty("processId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int ProcessId { get; set; }

//        [Newtonsoft.Json.JsonProperty("architecture", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Architecture { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class AgentTask
//    {
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Id { get; set; }

//        [Newtonsoft.Json.JsonProperty("command", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Command { get; set; }

//        [Newtonsoft.Json.JsonProperty("arguments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<string> Arguments { get; set; }

//        [Newtonsoft.Json.JsonProperty("file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public byte[] File { get; set; }

//        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset StartTime { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class AgentTaskHistory
//    {
//        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public TaskStatus Status { get; set; }

//        [Newtonsoft.Json.JsonProperty("agentTask", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public AgentTask AgentTask { get; set; }

//        [Newtonsoft.Json.JsonProperty("agentTaskResult", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public AgentTaskResult AgentTaskResult { get; set; }

//        public bool IsTaskFinished() // I added this
//        {
//            if (Status == TaskStatus.FINISHED)
//            {
//                return true;
//            }

//            return false;
//        }

//        //public void SetTask(AgentTask task)
//        //{
//        //    this.AgentTask = task;
//        //}
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class AgentTaskResult
//    {
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Id { get; set; }

//        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Result { get; set; }

//        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset EndTime { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public enum HealthType
//    {

//        Healthy = 0,

//        UnHealthy = 1,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class Listener
//    {
//        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public ListenerType Type { get; set; }

//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        [Newtonsoft.Json.JsonProperty("bindPort", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int BindPort { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public enum ListenerType
//    {

//        HTTP = 0,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class StartHttpListenerRequest
//    {
//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        [Newtonsoft.Json.JsonProperty("bindPort", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int BindPort { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class TaskAgentRequest
//    {
//        [Newtonsoft.Json.JsonProperty("command", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Command { get; set; }

//        [Newtonsoft.Json.JsonProperty("arguments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<string> Arguments { get; set; }

//        [Newtonsoft.Json.JsonProperty("file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string File { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public enum TaskStatus
//    {

//        PENDING = 0,

//        FINISHED = 1,

//    }



//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class ApiException : System.Exception
//    {
//        public int StatusCode { get; private set; }

//        public string Response { get; private set; }

//        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

//        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
//            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
//        {
//            StatusCode = statusCode;
//            Response = response;
//            Headers = headers;
//        }

//        public override string ToString()
//        {
//            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
//    public partial class ApiException<TResult> : ApiException
//    {
//        public TResult Result { get; private set; }

//        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
//            : base(message, statusCode, response, headers, innerException)
//        {
//            Result = result;
//        }
//    }

//}

//#pragma warning restore 1591
//#pragma warning restore 1573
//#pragma warning restore 472
//#pragma warning restore 114
//#pragma warning restore 108
//#pragma warning restore 3016
//#pragma warning restore 8603